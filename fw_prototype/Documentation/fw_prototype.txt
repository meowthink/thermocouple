=============================================================================
List of generated methods in project: fw_prototype

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "SM"        (component SynchroMaster)
   - SM_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data).   For information about SW overrun behavior please see <General info page>.
   - SM_SendChar -Sends one character to the channel.
   - SM_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, and 
                the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character.
   - SM_GetCharsInTxBuf -Returns the number of characters in the output buffer.

Module "BitsCS"    (component BitsIO)
   - BitsCS_GetDir -Return selected direction.
   - BitsCS_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - BitsCS_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BitsCS_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then 
                it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).
   - BitsCS_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is 
                [input] it saves the value to a memory or register, this value will be written to the pin after switching to 
                the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] 
                it writes the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BitsCS_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. 
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BitsCS_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, FALSE)
                ]. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BitsCS_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!
                GetBit(Bit))]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "BitsMux"   (component BitsIO)
   - BitsMux_GetDir -Return selected direction.
   - BitsMux_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - BitsMux_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BitsMux_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then 
                it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).
   - BitsMux_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is 
                [input] it saves the value to a memory or register, this value will be written to the pin after switching to 
                the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] 
                it writes the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BitsMux_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. 
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BitsMux_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, 
                FALSE)]. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - BitsMux_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!
                GetBit(Bit))]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "TIKrnl"    (component TimerInt)
   - TIKrnl_SetPeriodTicks16 -This method sets the new period of the generated events. The period is expressed in CPU [ticks] 
                as a 16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' 
                is selected in the <Timing dialog box> in the Runtime setting area.
   - TIKrnl_SetPeriodTicks32 -This method sets the new period of the generated events. The period is expressed in CPU [ticks] 
                as a 32-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' 
                is selected in the <Timing dialog box> in the Runtime setting area.
   - TIKrnl_SetPeriodUS -This method sets the new period of the generated events. The period is expressed in [microseconds] as 
                a 16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.
   - TIKrnl_SetPeriodMS -This method sets the new period of the generated events. The period is expressed in [milliseconds] as 
                a 16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.
   - TIKrnl_SetFreqHz -This method sets the new frequency of the generated events. The frequency is expressed in [Hz] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> in the Runtime setting area.

Module "AD"        (component ADC)
   - AD_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)

Module "AS"        (component AsynchroSerial)
   - AS_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar method 
                only stores data into an output buffer. In case of a zero output buffer size, only one character can be stored. 
                Enabling the component (Enable method) starts the transmission of the stored data. This method is available 
                only if the transmitter property is enabled.
   - AS_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "CAN"       (component FreescaleCAN)
   - CAN_SetAcceptanceCode -Sets the acceptance code registers. This method writes a code mask directly to the acceptance code 
                registers.
   - CAN_SetAcceptanceMask -Sets the acceptance mask registers. This method writes an acceptance mask directly to the 
                acceptance mask registers.
   - CAN_SetAcceptanceMode -Sets the acceptance mode register.
   - CAN_SendFrame -Sends the frame via the CAN device. Using this method the user can send own message to the CAN bus. This 
                method allows to specify CAN buffer number, message ID, data to be sent and frame type 
                (DATA_FRAME/REMOTE_FRAME).
   - CAN_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event or 
                GetStateRX method.
   - CAN_GetStateTX -Returns a value of the transmission complete flags.
   - CAN_GetStateRX -Returns a value of the reception complete flag.
   - CAN_GetError -Returns the content of the receiver flag register.
   - CAN_AbortMessage -Requests that scheduled message buffer is aborted.
   - CAN_SendFrameExt -Sends a frame. This method automatically selects a free transmit buffer for data transmission. The user 
                cannot specify a transmit buffer.

Module "BitDCCTL"  (component BitIO)
   - BitDCCTL_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - BitDCCTL_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - BitDCCTL_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - BitDCCTL_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "Cpu"       (component MC9S08DZ60_32)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
